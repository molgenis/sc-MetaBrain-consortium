#!/usr/bin/env python
import os

# Set logger level.
if config["settings_extra"]["debug"]:
    logger.set_level("DEBUG")

# Check required input arguments.
if config["inputs"]["singularity_image"] is None or not os.path.exists(config["inputs"]["singularity_image"]):
    logger.error("Critical, singularity_image does not exist.\n\nExiting.")
    exit("MissingsingularityImage")
if config["inputs"]["repo_dir"] is None or not os.path.exists(config["inputs"]["repo_dir"]):
    logger.error("Critical, repo_dir does not exist.\n\nExiting.")
    exit("MissingRepoDir")
if config["outputs"]["output_dir"] is None:
    logger.error("Critical, the output_dir cannot be empty.\n\nExiting.")
    exit("MissingOutputDir")
if config["inputs"]["gene_annotation"] is None or not os.path.exists(config["inputs"]["repo_dir"]):
    logger.error("Critical, gene_annotation does not exist.\n\nExiting.")
    exit("MissingGeneAnnotation")
if config["inputs"]["genotype"] is None or not os.path.exists(config["inputs"]["repo_dir"]):
    logger.error("Critical, genotype does not exist.\n\nExiting.")
    exit("MissingGenotype")
if config["inputs"]["co_expr_dir"] is None or not os.path.exists(config["inputs"]["repo_dir"]):
    logger.error("Critical, co_expr_dir does not exist.\n\nExiting.")
    exit("MissingCoExprDir")
if config["inputs"]["wg0_file_directories"] is None or not os.path.exists(config["inputs"]["repo_dir"]):
    logger.error("Critical, wg0_file_directories does not exist.\n\nExiting.")
    exit("MissingWg0FileDirectories")

# Add trailing /.
if not config["outputs"]["output_dir"].endswith("/"):
    config["outputs"]["output_dir"] += "/"
if not config["inputs"]["repo_dir"].endswith("/"):
    config["inputs"]["repo_dir"] += "/"
if not config["inputs"]["co_expr_dir"].endswith("/"):
    config["inputs"]["co_expr_dir"] += "/"

# Define the chromosomes.
if config["settings"]["chromosomes"] is None:
  config["settings"]["chromosomes"] = [str(i) for i in range(1, 23)]

# Define the cell types.
if config["settings"]["cell_type"] is None:
  config["settings"]["cell_type"] = list(config["inputs"]["top_effects"].keys())


def print_wildcards(wildcards):
    out = []
    for key, value in wildcards.items():
        out.append(key + "=" + value)
    return ", ".join(out)

def get_batch_number(wildcards):
  logger.debug("get_pool_samples({})".format(print_wildcards(wildcards)))
  out_dir = checkpoints.create_batches.get(**wildcards).output[0]
  batches = glob_wildcards(os.path.join(out_dir, f"chr{wildcards.chr}" + "-batch-{n_batch}.txt"))
  logger.debug("\tfound batches: '" + ", ".join(batches.n_batch) + "'")

  if len(batches.n_batch) == 0:
    logger.error("Critical, no batches found.")
    exit()
  
  return batches.n_batch

rule all:
  input: 
    merged_coeqtls = expand(config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/{cell_type}-TopEffects-allsignificantTriplets.txt", cell_type=config["settings"]["cell_type"])
    # merged_coeqtls = expand(config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/{cell_type}-TopEffects.txt", cell_type=config["settings"]["cell_type"])

rule create_linkfile:
  input: 
    corr = config["inputs"]["co_expr_dir"] + "correlations/data/{cell_type}/chr{chr}/{cell_type}.chr.{chr}.corr.transpose.stripped.txt.gz",
    wg0 = config["inputs"]["wg0_file_directories"]
  output: 
    linkfile = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/linkfile.txt"
  resources:
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["create_linkfile_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["create_linkfile_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["create_linkfile_time"]]
  threads: config["create_linkfile_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    script = config["inputs"]["repo_dir"] + "scripts/create_linkfile.py",
  log: config["outputs"]["output_dir"] + "log/{cell_type}/chr{chr}/create_linkefile.{cell_type}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} python {params.script} \
      --corr {input.corr} \
      --wg0 {input.wg0} \
      --output {output.linkfile} > {log} 2>&1
    """

rule create_snp_gene_pair_triplet:
  input: 
    top_effects = lambda wildcards: config["inputs"]["top_effects"][wildcards.cell_type],
    corr = config["inputs"]["co_expr_dir"] + "correlations/data/{cell_type}/chr{chr}/{cell_type}.chr.{chr}.corr.transpose.stripped.txt.gz"
  output: 
    gene_pair = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/genepairs.txt",
    triplet = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/snp_genepair_triplets_to_test.txt",
    group = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/genepair_egene_groups.txt"
  resources:
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["create_snp_gene_pair_triplet_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["create_snp_gene_pair_triplet_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["create_snp_gene_pair_triplet_time"]]
  threads: config["create_snp_gene_pair_triplet_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    script =  config["inputs"]["repo_dir"] + "scripts/get_snp_genepair_triplets.py",
    signif_column = config["settings"]["signif_column"],
    alpha = config["settings"]["alpha"],
    out = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/"
  log: config["outputs"]["output_dir"] + "log/{cell_type}/chr{chr}/create_snp_gene_pair_triplet.{cell_type}.chr.{chr}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} python {params.script} \
      --chr {wildcards.chr} \
      --top_effects {input.top_effects} \
      --corr {input.corr} \
      --signif_column {params.signif_column} \
      --alpha {params.alpha} \
      --out {params.out} > {log} 2>&1
    """

rule create_annotation:
  input: 
    gene_pairs = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/genepairs.txt",
    gene_annotation = config["inputs"]["gene_annotation"]
  output: 
    annotation = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/annotation.txt.gz"
  resources:
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["create_annotation_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["create_annotation_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["create_annotation_time"]]
  threads: config["create_annotation_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    script =  config["inputs"]["repo_dir"] + "scripts/create_annotation.py"
  log: config["outputs"]["output_dir"] + "log/{cell_type}/chr{chr}/create_annotation.{cell_type}.chr.{chr}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} python {params.script} \
      --gene_pairs {input.gene_pairs} \
      --gene_annotation {input.gene_annotation} \
      --output {output.annotation} > {log} 2>&1
    """

rule filter_genotype:
  input:
    triplet = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/snp_genepair_triplets_to_test.txt",
    genotype = config["inputs"]["genotype"]
  output:
    filtered_genotype = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/{cell_type}.eqtlsnps.bgz.vcf.gz"
  resources:
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["filter_genotype_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["filter_genotype_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["filter_genotype_time"]] 
  threads: config["filter_genotype_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    script =  config["inputs"]["repo_dir"] + "scripts/filter_genotype.py ",
    out = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/{cell_type}."
  log: config["outputs"]["output_dir"] + "log/{cell_type}/chr{chr}/filter_genotype.{cell_type}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} python {params.script} \
      --snp_genepair {input.triplet} \
      --genotype {input.genotype} \
      --output {params.out}eqtlsnps.vcf.gz > {log} 2>&1

    ml HTSlib/1.19.1-GCCcore-11.3.0 
    zcat {params.out}eqtlsnps.vcf.gz | bgzip -c > {output.filtered_genotype}
    tabix -p vcf {output.filtered_genotype}
    rm {params.out}eqtlsnps.vcf.gz
    """

checkpoint create_batches:
  input:
    gene_pairs = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/genepairs.txt",
    annotation = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/annotation.txt.gz",
    triplet = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/snp_genepair_triplets_to_test.txt",
    groups = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/genepair_egene_groups.txt"
  output:
    data_dir = directory(config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/batches/"),
    done = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/batches/chr{chr}-batches.done"
    # batches = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/batches/chr{chr}-batch-{n}.txt
  resources:
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["create_batches_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["create_batches_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["create_batches_time"]]
  threads: config["create_batches_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    script =  config["inputs"]["repo_dir"] + "scripts/create_batches.py",
    n_genes = config["settings"]["n_genes"],
    out = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/",
  log: config["outputs"]["output_dir"] + "log/{cell_type}/chr{chr}/create_batches.{cell_type}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} python {params.script} \
      --genes {input.gene_pairs} \
      --nrgenes {params.n_genes} \
      --annotation {input.annotation} \
      --expgroups {input.groups} \
      --chr {wildcards.chr} \
      --out {params.out} > {log} 2>&1
    singularity exec --bind {params.bind} {params.sif} touch {output.done}
    """

rule run_co_eqtl:
  input:
    batch = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/batches/chr{chr}-batch-{n_batch}.txt",
    correlation = config["inputs"]["co_expr_dir"] + "correlations/data/{cell_type}/chr{chr}/{cell_type}.chr.{chr}.corr.transpose.stripped.txt.gz",
    linkfile = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/linkfile.txt",
    filtered_genotype = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/{cell_type}.eqtlsnps.bgz.vcf.gz",
    gene_pairs = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/genepairs.txt",
    annotation = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/annotation.txt.gz",
    triplet = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/snp_genepair_triplets_to_test.txt",
    triplet_group = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/genepair_egene_groups.txt"
  output:
    log = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/output/chr{chr}-batch-{n_batch}-log.txt.gz",
    finished = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/output/chr{chr}-batch-{n_batch}-TopEffects.finished",
    coeqtls = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/output/chr{chr}-batch-{n_batch}-TopEffects.txt"
  resources:
    java_mem_gb = lambda wildcards, attempt: attempt * config["run_co_eqtl_memory"] * config["run_co_eqtl_threads"] - config["settings_extra"]["java_memory_buffer"],
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["run_co_eqtl_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["run_co_eqtl_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["run_co_eqtl_time"]]
  threads: config["run_co_eqtl_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    java_threads = config["run_co_eqtl_threads"] * 2,
    jar = config["inputs"]["mbqtl_jar"],
    permutations = config["mbqtl_settings"]["perm"],
    maf = config["mbqtl_settings"]["maf"],
    cr = config["mbqtl_settings"]["cr"],
    hwep = config["mbqtl_settings"]["hwep"],
    minobservations = config["mbqtl_settings"]["minobservations"],
    mingenotypecount = config["mbqtl_settings"]["mingenotypecount"],
    out = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/output/chr{chr}-batch-{n_batch}"
  log: config["outputs"]["output_dir"] + "log/{cell_type}/chr{chr}/run_co_eqtl.{cell_type}.chr.{chr}.batch.{n_batch}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} java -Xmx{resources.java_mem_gb}g -Xms{resources.java_mem_gb}g \
      -Djava.util.concurrent.ForkJoinPool.common.parallelism={params.java_threads} \
      -Dmaximum.threads={params.java_threads} -Dthread.pool.size={params.java_threads} \
      -jar {params.jar} \
      --mode mbqtl \
      --annotation {input.annotation} \
      --exp {input.correlation} \
      --gte {input.linkfile} \
      --vcf {input.filtered_genotype} \
      --chr {wildcards.chr} \
      --perm {params.permutations} \
      --maf {params.maf} \
      --cr {params.cr} \
      --hwep {params.hwep} \
      --minobservations {params.minobservations} \
      --genelimit {input.batch} \
      --out {params.out} \
      --expgroups {input.triplet_group} \
      --mingenotypecount {params.mingenotypecount} \
      --fisherzmeta \
      --snpgenelimit {input.triplet} > {log} 2>&1
    """

rule merge_batches:
  input:
    done = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/batches/chr{chr}-batches.done",
    coeqtls = lambda wildcards: expand(config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/output/chr{chr}-batch-{n_batch}-TopEffects.txt", n_batch=get_batch_number(wildcards), allow_missing=True)
  output:
    merged_batches = temp(config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/{cell_type}-chr{chr}-TopEffects.txt")
  resources:
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["merge_batches_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["merge_batches_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["merge_batches_time"]]
  threads: config["merge_batches_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    script = config["inputs"]["repo_dir"] + "scripts/merge_batches.py",
  log: config["outputs"]["output_dir"] + "log/{cell_type}/chr{chr}/merge_batches.{cell_type}.chr{chr}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} python {params.script} \
      --input {input.coeqtls} \
      --output {output.merged_batches} > {log} 2>&1
    """

rule merge_co_eqtls:
  input:
    merged_batches = expand(config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/{cell_type}-chr{chr}-TopEffects.txt", chr=config["settings"]["chromosomes"], allow_missing=True)
  output:
    coeqtls = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/{cell_type}-TopEffects.txt"
  resources:
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["merge_co_eqtls_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["merge_co_eqtls_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["merge_co_eqtls_time"]]
  threads: config["merge_co_eqtls_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    script = config["inputs"]["repo_dir"] + "scripts/merge_batches.py",
  log: config["outputs"]["output_dir"] + "log/{cell_type}/merge_co_eqtls.{cell_type}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} python {params.script} \
      --input {input.merged_batches} \
      --output {output.coeqtls} > {log} 2>&1
    """

rule multiple_testing_correction:
  input:
    coeqtls = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/{cell_type}-TopEffects.txt"
  output:
    qval = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/{cell_type}-TopEffectswithQval.txt",
    hist = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/plots/{cell_type}-TopEffects_hist.png",
    overview = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/plots/{cell_type}-TopEffects_overview.png"
  resources:
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["multiple_testing_correction_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["multiple_testing_correction_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["multiple_testing_correction_time"]]
  threads: config["multiple_testing_correction_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["mbqtl_singularity_image"],
    script = config["inputs"]["repo_dir"] + "scripts/multiple_testing_correction.R",
    out = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/{cell_type}-TopEffects",
    plot_out = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/plots/{cell_type}-TopEffects"
  log: config["outputs"]["output_dir"] + "log/{cell_type}/multiple_testing_correction.{cell_type}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} Rscript {params.script} \
      --input {input.coeqtls} \
      --nom_pvalue MetaP \
      --n_tests NrTestedSNPs \
      --beta_adj_pvalue BetaAdjustedMetaP \
      --beta_dist_a BetaDistAlpha \
      --beta_dist_b BetaDistBeta \
      --bonf_pvalue_col BonfAdjustedMetaP \
      --bonf_bh_fdr_col BonfBHAdjustedMetaP \
      --bh_fdr_col bh_fdr \
      --qvalue_col qval \
      --nom_thresh_col PvalueNominalThreshold \
      --alpha 0.05 \
      --data_out {params.out} \
      --plot_out {params.plot_out} \
      --suffix 'withQval' > {log} 2>&1
    """

rule get_significant_effects:
  input:
    coeqtl = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/{cell_type}-TopEffectswithQval.txt",
    # batches = expand(config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/chr{chr}/batches/chr{chr}-batches.done", chr=config["settings"]["chromosomes"], allow_missing=True),
    triplet = expand(config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/snp_genepair_triplets_to_test.txt", chr=config["settings"]["chromosomes"], allow_missing=True)
  output:
    significant_effects = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/EX-TopEffectswithQval-significant.txt",
    genepairs = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/genepairs_to_dump.txt",
    snp_genepairs = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/snp_genepairs_to_dump.txt"
  resources:
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["get_significant_effects_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["get_significant_effects_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["get_significant_effects_time"]]
  threads: config["get_significant_effects_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    script = config["inputs"]["repo_dir"] + "scripts/get_significant_effects.py",
    out = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/",
    batches = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/"
  log: config["outputs"]["output_dir"] + "log/{cell_type}/get_significant_effects.{cell_type}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} python {params.script} \
      --input {input.coeqtl} \
      --out {params.out} \
      --batches {params.batches} \
      --snp_genepair_triplets {input.triplet} > {log} 2>&1
    """

rule run_coeqtl_dump:
  input:
    annotation = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/annotation.txt.gz",
    correlation = config["inputs"]["co_expr_dir"] + "correlations/data/{cell_type}/chr{chr}/{cell_type}.chr.{chr}.corr.transpose.stripped.txt.gz",
    linkfile = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/linkfile.txt",
    filtered_genotype = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/{cell_type}.eqtlsnps.bgz.vcf.gz",
    gene_pairs = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/genepairs_to_dump.txt",
    triplet_group = config["outputs"]["output_dir"] + "coeQTL/reffiles/{cell_type}/chr{chr}/genepair_egene_groups.txt",
    triplet = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/snp_genepairs_to_dump.txt"
  output:
    log = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/dump/chr{chr}-dump-log.txt.gz",
    finished = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/dump/chr{chr}-dump-TopEffects.finished",
    coeqtls = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/dump/chr{chr}-dump-TopEffects.txt"
  resources:
    java_mem_gb = lambda wildcards, attempt: attempt * config["run_coeqtl_dump_memory"] * config["run_coeqtl_dump_threads"] - config["settings_extra"]["java_memory_buffer"],
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["run_coeqtl_dump_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["run_coeqtl_dump_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["run_coeqtl_dump_time"]]
  threads: config["run_coeqtl_dump_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    java_threads = config["run_coeqtl_dump_threads"] * 2,
    jar = config["inputs"]["mbqtl_jar"],
    permutations = 0,
    maf = config["mbqtl_settings"]["maf"],
    cr = config["mbqtl_settings"]["cr"],
    hwep = config["mbqtl_settings"]["hwep"],
    minobservations = config["mbqtl_settings"]["minobservations"],
    mingenotypecount = config["mbqtl_settings"]["mingenotypecount"],
    out = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/dump/chr{chr}-dump"
  log: config["outputs"]["output_dir"] + "log/{cell_type}/chr{chr}/run_coeqtl_dump.{cell_type}.chr{chr}.log"
  shell:
    """
    mkdir -p $(dirname {params.out})
    singularity exec --bind {params.bind} {params.sif} java -Xmx{resources.java_mem_gb}g -Xms{resources.java_mem_gb}g \
      -Djava.util.concurrent.ForkJoinPool.common.parallelism={params.java_threads} \
      -Dmaximum.threads={params.java_threads} -Dthread.pool.size={params.java_threads} \
      -jar {params.jar} \
      --mode mbqtl \
      --annotation {input.annotation} \
      --exp {input.correlation} \
      --gte {input.linkfile} \
      --vcf {input.filtered_genotype} \
      --chr {wildcards.chr} \
      --perm {params.permutations} \
      --maf {params.maf} \
      --cr {params.cr} \
      --hwep {params.hwep} \
      --minobservations {params.minobservations} \
      --genelimit {input.gene_pairs} \
      --out {params.out} \
      --expgroups {input.triplet_group} \
      --mingenotypecount {params.mingenotypecount} \
      --fisherzmeta \
      --outputall \
      --snpgenelimit {input.triplet} > {log} 2>&1
    """

rule merge_all_triplets:
  input: 
    top_effects = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/{cell_type}-TopEffectswithQval.txt",
    coeqtls = expand(config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/dump/chr{chr}-dump-TopEffects.txt", chr=config["settings"]["chromosomes"], allow_missing=True)
  output: 
    merged = config["outputs"]["output_dir"] + "coeQTL/output/{cell_type}/{cell_type}-TopEffects-allsignificantTriplets.txt"
  resources:
    mem_per_thread_gb = lambda wildcards, attempt: attempt * config["merge_all_triplets_memory"],
    disk_per_thread_gb = lambda wildcards, attempt: attempt * config["merge_all_triplets_memory"],
    time = lambda wildcards,attempt: config["cluster_time"][(attempt - 1) + config["merge_all_triplets_time"]]
  threads: config["merge_all_triplets_threads"]
  params:
    bind = config["inputs"]["bind_path"],
    sif = config["inputs"]["singularity_image"],
    script = config["inputs"]["repo_dir"] + "scripts/filter_significant_triplets.py",
  log: config["outputs"]["output_dir"] + "log/{cell_type}/merge_all_triplets.{cell_type}.log"
  shell:
    """
    singularity exec --bind {params.bind} {params.sif} python {params.script} \
      --significant_egenes {input.top_effects} \
      --input {input.coeqtls} \
      --output {output.merged} > {log} 2>&1
    """