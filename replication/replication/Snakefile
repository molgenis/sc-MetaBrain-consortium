#!/usr/bin/env python
import os

# Add trailing /.
if not config["inputs"]["repo_dir"].endswith("/"):
    config["inputs"]["repo_dir"] += "/"
if not config["outputs"]["output_dir"].endswith("/"):
    config["outputs"]["output_dir"] += "/"

if not config["settings"]["disc_folders"]:
    config["settings"]["disc_folders"] = ["Main"]

if not config["settings"]["repl_folders"]:
    config["settings"]["repl_folders"] = ["Main"]

# Check if the singularity image exists.
if not os.path.exists(config["inputs"]["singularity_image"]):
    logger.info("Error, the singularity image does not exist.\n\nExiting.")
    exit("MissingSIFFile")

if config["inputs"]["discovery_name"] == config["inputs"]["replication_name"]:
    logger.info("Error, discovery and replication name are the same.")
    exit("InvalidDiscReplName")

rule all:
    input: config["outputs"]["output_dir"] + "replication_data/" + config["inputs"]["discovery_name"] + "discovery_" + config["inputs"]["replication_name"] + "replication/" + config["inputs"]["discovery_name"] + "_Disc_" + config["inputs"]["replication_name"] + "_Repl_ReplicationStats.txt.gz"


def get_plot_replication_stats_input(wildcards):
    input_files = []
    for disc_folder in config["settings"]["disc_folders"]:
        for disc_ct in config["settings"]["disc_cell_types"]:
            for repl_folder in config["settings"]["repl_folders"]:
                for repl_ct in config["settings"]["repl_cell_types"]:
                    if config["settings"]["only_matching"] and disc_ct != repl_ct:
                        continue
                    input_files.append(config["outputs"]["output_dir"] + "replication_data/{disc_name}{disc_folder}discovery_{repl_name}{repl_folder}replication/{disc_name}{disc_folder}_{disc_ct}_Disc_{repl_name}{repl_folder}_{repl_ct}_Repl_ReplicationStats.txt.gz".format(disc_name=config["inputs"]["discovery_name"], disc_folder=disc_folder, disc_ct=disc_ct, repl_name=config["inputs"]["replication_name"], repl_folder=repl_folder, repl_ct=repl_ct))
    return input_files


rule plot_replication_stats:
    input:
        replication_stats = get_plot_replication_stats_input
    output:
        replication_stats = config["outputs"]["output_dir"] + "replication_data/" + config["inputs"]["discovery_name"] + "discovery_" + config["inputs"]["replication_name"] + "replication/" + config["inputs"]["discovery_name"] + "_Disc_" + config["inputs"]["replication_name"] + "_Repl_ReplicationStats.txt.gz",
        replication_figures = expand(config["outputs"]["output_dir"] + "replication_plot/" + config["inputs"]["discovery_name"] + "discovery_" + config["inputs"]["replication_name"] + "replication/" + config["inputs"]["discovery_name"] + "_Disc_" + config["inputs"]["replication_name"] + "_Repl_ReplicationStats.{extension}", extension=config["settings"]["extensions"])
    resources:
        mem_per_thread_gb = lambda wildcards, attempt: attempt * config["rules"]["plot_replication_stats_memory"],
        disk_per_thread_gb = lambda wildcards, attempt: attempt * config["rules"]["plot_replication_stats_memory"],
        time = lambda wildcards, attempt: config["cluster_time"][(attempt - 1) + config["rules"]["plot_replication_stats_time"]]
    threads: config["rules"]["plot_replication_stats_threads"]
    params:
        bind = config["inputs"]["bind_path"],
        sif = config["inputs"]["singularity_image"],
        script = config["inputs"]["repo_dir"] + "plot_replication_stats.py",
        workdir = config["outputs"]["output_dir"],
        disc_name = config["inputs"]["discovery_name"],
        disc_folders = " ".join(config["settings"]["disc_folders"]),
        disc_cell_types = " ".join(config["settings"]["disc_cell_types"]),
        repl_name = config["inputs"]["replication_name"],
        repl_folders = " ".join(config["settings"]["repl_folders"]),
        repl_cell_types = " ".join(config["settings"]["repl_cell_types"]),
        palette = "--palette " + config["inputs"]["palette"] if config["inputs"]["palette"] is not None else "",
        extensions = " ".join(config["settings"]["extensions"]),
    log: config["outputs"]["output_dir"] + "log/plot_replication_stats.log"
    shell:
        """
        singularity exec --bind {params.bind} {params.sif} python {params.script} \
            --workdir {params.workdir} \
            --disc_name {params.disc_name} \
            --disc_folders {params.disc_folders} \
            --disc_cell_types {params.disc_cell_types} \
            --repl_name {params.repl_name} \
            --repl_folders {params.repl_folders} \
            --repl_cell_types {params.repl_cell_types} \
            {params.palette} \
            --extension {params.extensions} > {log} 2>&1
        """


rule replication_plot:
    output:
        # replication_data = directory(config["outputs"]["output_dir"] + "replication_data/" + config["inputs"]["discovery_name"] + "{disc_folder}discovery_" + config["inputs"]["replication_name"] + "{repl_folder}_replication/"),
        # replication_plot = directory(config["outputs"]["output_dir"] + "replication_plot/" + config["inputs"]["discovery_name"] + "{disc_folder}discovery_" + config["inputs"]["replication_name"] + "{repl_folder}_replication/"),
        merged_effects = config["outputs"]["output_dir"] + "replication_data/" + config["inputs"]["discovery_name"] + "{disc_folder}discovery_" + config["inputs"]["replication_name"] + "{repl_folder}replication/" + config["inputs"]["discovery_name"] + "{disc_folder}_{disc_ct}_Disc_" + config["inputs"]["replication_name"] + "{repl_folder}_{repl_ct}_Repl_MergedEffects.txt.gz",
        replication_stats = config["outputs"]["output_dir"] + "replication_data/" + config["inputs"]["discovery_name"] + "{disc_folder}discovery_" + config["inputs"]["replication_name"] + "{repl_folder}replication/" + config["inputs"]["discovery_name"] + "{disc_folder}_{disc_ct}_Disc_" + config["inputs"]["replication_name"] + "{repl_folder}_{repl_ct}_Repl_ReplicationStats.txt.gz",
        figure = expand(config["outputs"]["output_dir"] + "replication_plot/" + config["inputs"]["discovery_name"] + "{disc_folder}discovery_" + config["inputs"]["replication_name"] + "{repl_folder}replication/" + config["inputs"]["discovery_name"] + "{disc_folder}_{disc_ct}_Disc_" + config["inputs"]["replication_name"] + "{repl_folder}_{repl_ct}_Repl.{extension}", extension=config["settings"]["extensions"], allow_missing=True)
    resources:
        mem_per_thread_gb = lambda wildcards, attempt: attempt * config["rules"]["replication_plot_memory"],
        disk_per_thread_gb = lambda wildcards, attempt: attempt * config["rules"]["replication_plot_memory"],
        time = lambda wildcards, attempt: config["cluster_time"][(attempt - 1) + config["rules"]["replication_plot_time"]]
    threads: config["rules"]["replication_plot_threads"]
    params:
        bind = config["inputs"]["bind_path"],
        sif = config["inputs"]["singularity_image"],
        script = config["inputs"]["repo_dir"] + "replication.py",
        discovery_method = config["inputs"]["discovery_method"],
        discovery_path = lambda wildcards: config["inputs"]["discovery_path"].replace("<CT>", wildcards.disc_ct.replace("EUR-", "EUR/")).replace("<FOLDER>", wildcards.disc_folder),
        discovery_name = config["inputs"]["discovery_name"],
        replication_method = config["inputs"]["replication_method"],
        replication_path = lambda wildcards: config["inputs"]["replication_path"].replace("<CT>", wildcards.repl_ct.replace("EUR-", "EUR/")).replace("<FOLDER>", wildcards.repl_folder),
        replication_name = config["inputs"]["replication_name"],
        gene = config["settings"]["gene"],
        snp = config["settings"]["snp"],
        pvalue = config["settings"]["pvalue"],
        effect = config["settings"]["effect"],
        allow_infer = "--allow_infer" if config["settings"]["allow_infer"] else "",
        rm_dupl = config["settings"]["rm_dupl"],
        alpha = config["settings"]["alpha"],
        fdr_calc_method = config["settings"]["fdr_calc_method"],
        log_modulus = "--log_modulus" if config["settings"]["log_modulus"] else "",
        palette = "--palette " + config["inputs"]["palette"] if config["inputs"]["palette"] is not None else "",
        extensions = " ".join(config["settings"]["extensions"]),
        outdir = config["outputs"]["output_dir"],
        force = "--force" if config["settings"]["force"] else "",
        save = "--save" if config["settings"]["save"] else "",
        qvalue_truncp_script = config["inputs"]["repo_dir"] + "qvalue_truncp.R",
        rb_script = config["inputs"]["repo_dir"] + "Rb.R",
    log: config["outputs"]["output_dir"] + "log/replication_plot." + config["inputs"]["discovery_name"] + "{disc_folder}_{disc_ct}_discovery." + config["inputs"]["replication_name"] + "{repl_folder}_{repl_ct}_replication.log"
    shell:
        """
        singularity exec --bind {params.bind} {params.sif} python {params.script} \
            --discovery_method {params.discovery_method} \
            --discovery_path {params.discovery_path} \
            --discovery_name {params.discovery_name}{wildcards.disc_folder} \
            --discovery_cell_type {wildcards.disc_ct} \
            --replication_method {params.replication_method} \
            --replication_path {params.replication_path} \
            --replication_name {params.replication_name}{wildcards.repl_folder} \
            --replication_cell_type {wildcards.repl_ct} \
            --gene {params.gene} \
            --snp {params.snp} \
            --pvalue {params.pvalue} \
            --effect {params.effect} \
            {params.allow_infer} \
            --rm_dupl {params.rm_dupl} \
            --alpha {params.alpha} \
            --fdr_calc_method {params.fdr_calc_method} \
            {params.log_modulus} \
            {params.palette} \
            --extensions {params.extensions} \
            --outdir {params.outdir} \
            {params.force} \
            {params.save} \
            --qvalue_truncp {params.qvalue_truncp_script} \
            --rb {params.rb_script} > {log} 2>&1
        """
